var express = require('express');
var router = express.Router();
var multer = require('multer');
var path = require('path');
const fs = require('fs');
const db = require('../db'); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const { v4: uuidv4 } = require('uuid');

// üìÇ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô uploads/uploads
    const uploadPath = path.join(__dirname, 'uploads', 'uploads');

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads/uploads ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!fs.existsSync(uploadPath)) {
        // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
        fs.mkdirSync(uploadPath, { recursive: true });
      }
      // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
      cb(null, uploadPath); // ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads/uploads ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
    } catch (err) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
      cb(new Error('‚ùå Failed to create upload directory'), null);
    }
  },
  filename: (req, file, cb) => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ timestamp
    const uniqueSuffix = Date.now() + path.extname(file.originalname); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ timestamp
    cb(null, uniqueSuffix); // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
  }
});
const upload = multer({ storage: storage });

// Route ‡∏´‡∏ô‡πâ‡∏≤ send_report
router.get('/', (req, res) => {
  if (!req.session.user) {
    return res.redirect('/users/login');
  }

  const { user } = req.session;
  const student = user.student;

  res.render('send_report', {
    title: '‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô',
    user: user,
    student: student
  });
});

router.post('/submit_report', upload.single('report_file'), async (req, res) => {
  if (!req.session.user) {
    return res.redirect('/users/login');
  }

  if (!req.file) {
    return res.status(400).send('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå');
  }

  const { user } = req.session;
  const document_id = uuidv4();
  const document_type = 'internship_report';
  const file_path = `/uploads/${req.file.filename}`; // ‡πÄ‡∏Å‡πá‡∏ö path ‡πÄ‡∏ï‡πá‡∏°
  const user_id = user.id;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user_id ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á user ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const userExists = await new Promise((resolve, reject) => {
      db.query(
        `SELECT user_id FROM user WHERE user_id = ?`,
        [user_id],
        (err, results) => {
          if (err) return reject('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user_id');
          if (results.length === 0) return reject('‡πÑ‡∏°‡πà‡∏û‡∏ö user_id ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
          resolve(results[0].user_id);
        }
      );
    });

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ request_id ‡∏à‡∏≤‡∏Å internship_request
    let request_id = await new Promise((resolve, reject) => {
      db.query(
        `SELECT request_id FROM internship_request WHERE student_id = ?`,
        [userExists],
        (err, results) => {
          if (err) return reject('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á request_id');
          resolve(results.length > 0 ? results[0].request_id : null);
        }
      );
    });

    if (!request_id) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ request_id, ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      request_id = uuidv4();
      const status = 'P'; // Pending
      const position_id = 'default_position_id';

      await new Promise((resolve, reject) => {
        db.query(
          `INSERT INTO internship_request (request_id, student_id, status, position_id) 
          VALUES (?, ?, ?, ?)`,
          [request_id, userExists, status, position_id],
          (err) => {
            if (err) return reject('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á request_id');
            resolve();
          }
        );
      });
    }

    console.log('üöÄ request_id:', request_id);

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ history_id ‡∏à‡∏≤‡∏Å internship_history
    let history_id = await new Promise((resolve, reject) => {
      db.query(
        `SELECT history_id FROM internship_history WHERE student_id = ?`,
        [userExists],
        (err, results) => {
          if (err) return reject('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á history_id');
          if (results.length === 0) return reject('‡πÑ‡∏°‡πà‡∏û‡∏ö history_id ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
          resolve(results[0].history_id);
        }
      );
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á document (‡∏•‡∏ö internship_history_id ‡∏≠‡∏≠‡∏Å)
    await new Promise((resolve, reject) => {
      db.query(
        `INSERT INTO document (document_id, document_type, file_path, request_id) 
        VALUES (?, ?, ?, ?)`, // ‡∏•‡∏ö internship_history_id
        [document_id, document_type, file_path, request_id],
        (err, results) => {
          if (err) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å document:', err);
            return reject('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• document');
          }
          resolve(results);
        }
      );
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á approval_document ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ history_id ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
    await new Promise((resolve, reject) => {
      console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô approval_document:', {
        document_id, document_type, file_path, history_id, request_id
      });
    
      db.query(
        `INSERT INTO approval_document (document_id, document_type, file_path, history_id, request_id) 
        VALUES (?, ?, ?, ?, ?)`,
        [document_id, document_type, file_path, history_id, request_id],
        (err) => {
          if (err) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å approval_document:', err);
            return reject('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å approval_document');
          }
          resolve();
        }
      );
    });

    res.send('<script>alert("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"); window.location.href = "/";</script>');
  } catch (error) {
    console.error(error);
    res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  }
});

module.exports = router;