var express = require('express');
var router = express.Router();
const db = require('../db');


function checkRole(requiredRole) {
  return (req, res, next) => {
    if (!req.session.user) {
      req.session.user = null;
      return res.redirect('/users/login');
    }

    const userRole = req.session.user.role?.toLowerCase();
    if (!userRole || userRole !== requiredRole.toLowerCase()) {
      return res.status(403).send('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ');
    }

    // ‡∏™‡πà‡∏á user ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ejs template
    res.locals.user = req.session.user; // ‡∏™‡πà‡∏á user ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤
    next();
  };
}

router.get("/", (req, res) => {
  console.log("üì¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á /check_report");

  if (!req.session.user) {
    return res.redirect("/users/login");
  }

  const { user } = req.session;
  const teacher = user.teacher;

  const sql = `
  SELECT ad.document_id, ad.document_type, ad.file_path, ad.create_up,
         u.name AS student_name,  -- ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á user
         c.name AS company_name,
         r.status
  FROM approval_document ad
  LEFT JOIN internship_request r ON ad.request_id = r.request_id  
  LEFT JOIN user u ON r.student_id = u.user_id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á student_id ‡∏Å‡∏±‡∏ö user_id
  LEFT JOIN company c ON r.company_id = c.company_id
  WHERE ad.request_id IS NOT NULL;  -- ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ request_id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà NULL
`;

  db.query(sql, (error, results) => {
    if (error) {
      console.error("‚ùå Error fetching documents:", error);
      return res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }

    console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤:", results);

    res.render("check_report", {
      title: "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô",
      user: user,
      teacher: teacher,
      documents: results.length > 0 ? results : [],
      message: results.length > 0 ? "" : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
    });
  });
});

router.get("/report_evaluation", (req, res) => {
  const { user, teacher } = req.session;
  const documentId = req.query.document_id;
  const baseUrl = req.protocol + "://" + req.get("host"); // ‡∏™‡∏£‡πâ‡∏≤‡∏á baseUrl

  const sql = `
    SELECT ad.document_id, ad.document_type, ad.file_path, ad.create_up,
           u.name AS student_name,
           c.name AS company_name,
           r.status
    FROM approval_document ad
    LEFT JOIN internship_request r ON ad.request_id = r.request_id  
    LEFT JOIN user u ON r.student_id = u.user_id
    LEFT JOIN company c ON r.company_id = c.company_id
    WHERE ad.document_id = ?;
  `;

  db.query(sql, [documentId], (error, results) => {
    if (error) {
      console.error("‚ùå Error fetching document:", error);
      return res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }

    if (results.length === 0) {
      return res.status(404).send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£");
    }

    res.render("report_evaluation", {
      document: results[0],
      user: user,
      teacher: teacher,
      title: "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
      baseUrl: baseUrl  // ‡∏™‡πà‡∏á baseUrl ‡πÑ‡∏õ‡∏¢‡∏±‡∏á EJS
    });
  });
});
router.post("/submit_evaluation", async (req, res) => {
  console.log("üîπ [START] ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ POST /submit_evaluation");
  console.log("üì© ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°:", req.body);

  const { scores, round, additionalComments, documentId } = req.body;
  const { user } = req.session;

  if (!user || !user.id) {
    console.error("‚ùå [ERROR] ‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠ user_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", req.session);
    return res.status(401).send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
  }

  const assign_by = user.id;

  if (!scores || !documentId || scores.length === 0) {
    console.error("‚ùå [ERROR] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
    return res.status(400).send("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
  }

  try {
    // 1. ‡∏î‡∏∂‡∏á `student_id` ‡∏à‡∏≤‡∏Å `internship_history` ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `document_id`
    const studentQuery = `
      SELECT ih.student_id, ih.history_id 
      FROM internship_history ih
      JOIN approval_document ad ON ad.request_id = ih.internship_request_id
      WHERE ad.document_id = ?
    `;

    const [studentRows] = await db.promise().query(studentQuery, [documentId]);

    if (studentRows.length === 0) {
      console.error("‚ùå [ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö studentId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö document_id:", documentId);
      return res.status(400).send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö studentId");
    }

    const studentId = studentRows[0].student_id;
    const historyId = studentRows[0].history_id;
    console.log("üë§ [Student] studentId:", studentId);
    console.log("üìú [History] historyId:", historyId);

    // 2. ‡∏î‡∏∂‡∏á `criteria_id` ‡∏à‡∏≤‡∏Å `adviser_evaluation_criteria`
    let criteriaQuery = "SELECT criteria_id FROM adviser_evaluation_criteria ORDER BY create_up ASC";
    let [criteriaRows] = await db.promise().query(criteriaQuery);

    if (criteriaRows.length < 6) {
      console.log("‚ùå [ERROR] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 6 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠, ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...");

      const insertQuery = `
        INSERT INTO adviser_evaluation_criteria (criteria_id, criteria_name, create_up)
        VALUES
        (UUID(), 'Criteria 5', NOW()),
        (UUID(), 'Criteria 6', NOW());
      `;

      await db.promise().query(insertQuery);

      [criteriaRows] = await db.promise().query(criteriaQuery);
      console.log("‚úÖ [Criteria] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà");
    }

    console.log("üìù [Criteria] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", criteriaRows.length);
    console.log("üìù [Scores] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", scores.length);

    if (criteriaRows.length !== scores.length) {
      console.error("‚ùå [ERROR] ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô");
      return res.status(400).send(`‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (${criteriaRows.length}) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (${scores.length}) ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô`);
    }

    const evaluation_date = new Date().toISOString().split("T")[0];
    const comment = additionalComments || "";

    // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á adviser_evaluation ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ historyId
    const sql = `
      INSERT INTO adviser_evaluation 
      (evaluation_id, history_id, no, score, round, evaluation_date, comment, assign_by, criteria_id, create_up) 
      VALUES (UUID(), ?, ?, ?, ?, ?, ?, ?, ?, NOW())
    `;

    const promises = scores.map((score, index) => {
      const no = index + 1;
      const criteria_id = criteriaRows[index].criteria_id;

      console.log(`üîπ [INSERT] ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà ${no} | ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${score} | criteria_id: ${criteria_id}`);

      return db.promise().query(sql, [
        historyId, // ‡πÉ‡∏ä‡πâ `historyId` ‡πÅ‡∏ó‡∏ô `studentId`
        no, score, round, evaluation_date, comment, assign_by, criteria_id
      ]);
    });

    await Promise.all(promises);

    console.log("üéâ [SUCCESS] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    res.redirect(`/report_evaluation?document_id=${documentId}`);
  } catch (error) {
    console.error("‚ùå [ERROR] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:", error);
    res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•");
  }
});

module.exports = router;