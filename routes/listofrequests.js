var express = require('express');
var router = express.Router();
const db = require('../db');
const path = require('path');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
function checkRole(requiredRole) {
    return (req, res, next) => {
        if (!req.session.user) {
            req.session.user = null;
            return res.redirect('/users/login');
        }

        const userRole = req.session.user.role?.toLowerCase();
        if (!userRole || userRole !== requiredRole.toLowerCase()) {
            return res.status(403).send('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ');
        }

        next();
    };
}

// Route: ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', checkRole('teacher'), async (req, res) => {
    try {
        let page = parseInt(req.query.page, 10) || 1;
        if (page <= 0) return res.status(400).send('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å');

        const itemsPerPage = 10;
        const offset = (page - 1) * itemsPerPage;

        const query = `SELECT 
                ir.request_id,
                ir.request_start_date,
                ir.request_end_date,
                ir.status,
                student.name AS student_name,
                student.email AS student_email,
                COALESCE(company.name, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏') AS company_name,
                COALESCE(job.position_name, '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏') AS position_name,
                student.user_id AS student_id
            FROM 
                internship_request ir
            JOIN 
                \`user\` student ON ir.student_id = student.user_id
            LEFT JOIN 
                company ON ir.company_id = company.company_id
            LEFT JOIN 
                position_open job ON ir.position_id = job.position_id
            WHERE 
                ir.delete_up IS NULL
            ORDER BY 
                ir.request_start_date DESC  -- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
            LIMIT ? OFFSET ?`;

        const [requests] = await db.promise().query(query, [itemsPerPage, offset]);

        // ‡πÉ‡∏ä‡πâ request_id ‡πÅ‡∏•‡∏∞ student_id ‡∏à‡∏≤‡∏Å internship_request ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        const documentQuery = `SELECT 
            doc.request_id, 
            doc.file_path, 
            doc.document_type
        FROM 
            document doc
        JOIN 
            internship_request ir ON ir.request_id = doc.request_id
        WHERE 
            ir.request_id = ?`;

        // ‡πÉ‡∏ä‡πâ db.promise().query() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠
        const documentPromises = requests.map(request =>
            db.promise().query(documentQuery, [request.request_id])
        );

        const documentsResult = await Promise.all(documentPromises);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô requests
        documentsResult.forEach((docs, index) => {
            requests[index].documents = docs[0].map(doc => ({
                ...doc,
                file_name: path.basename(doc.file_path)
            }));
        });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const countQuery = 'SELECT COUNT(*) AS total FROM internship_request ir WHERE ir.delete_up IS NULL';
        const [[{ total }]] = await db.promise().query(countQuery);
        const totalPages = Math.max(Math.ceil(total / itemsPerPage), 1);

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ listofrequests
        res.render('listofrequests', {
            title: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
            requests,
            teacher: req.session.user,
            page,
            totalPages
        });

    } catch (err) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err.message);
        res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
});

// üìå API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡∏≤‡∏° request_id
router.get('/document/:requestId', async (req, res) => {
    try {
        const requestId = req.params.requestId;
        console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö request_id:", requestId);

        const documentQuery = `SELECT file_path, document_type FROM document WHERE request_id = ?`;
        const [documents] = await db.promise().query(documentQuery, [requestId]);

        if (!documents || documents.length === 0) {
            console.log("üö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö request_id:", requestId);
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£' });
        }

        console.log("‚úÖ ‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:", documents);
        res.status(200).json({ documents });
    } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:", error);
        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
    }
});
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô
router.post('/update-status/:requestId', async (req, res) => {
    const { requestId } = req.params;
    let { status } = req.body;

    console.log('üîç ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ requestId:', requestId);
    console.log('üîç ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ status:', status);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° 'R' ‡πÉ‡∏ô validStatuses
    const validStatuses = ['P', 'A', 'C', 'R', 'p', 'a', 'c', 'r'];
    if (!status || !validStatuses.includes(status)) {
        return res.status(400).json({ message: '‚ùå Status ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    try {
        // ‡πÅ‡∏õ‡∏•‡∏á status ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏™‡∏°‡∏≠ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å)
        status = status.toUpperCase();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ requestId ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
        const [request] = await db.promise().query(
            'SELECT * FROM internship_request WHERE request_id = ?',
            [requestId]
        );

        if (!request.length) {
            return res.status(404).json({ message: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô' });
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status
        await db.promise().query(
            'UPDATE internship_request SET status = ? WHERE request_id = ?',
            [status, requestId]
        );

        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢ redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        res.redirect('/listofrequests');

    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:', error);
        res.status(500).json({ message: '‚ùå Internal Server Error', error: error.message });
    }
});
module.exports = router;
