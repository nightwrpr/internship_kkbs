var express = require('express');
var router = express.Router();
const db = require('../db');
const crypto = require("crypto"); // ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á UUID
// üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ) -- ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ
router.get('/', (req, res) => {
  const { user } = req.session || {};
  const teacher = user?.teacher || null;

  console.log("Session User:", user); // Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session

  res.render('adviser_nites_evaluation', {
    title: '‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å',
    user: user,
    teacher: teacher
  });
});
router.post('/save', async (req, res) => {
  try {
    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
    console.log("üì• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å client:", req.body);

    const { request_id, scores, additionalComments, criteriaNames } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!request_id || !scores || (criteriaNames && criteriaNames.length !== scores.length)) {
      return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
    }

    // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ criteriaNames ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const criteriaDefaultNames = criteriaNames || ["‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 1", "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 2", "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 3", "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 4", "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 5", "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 6"];

    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ history_id ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö request_id
    const [historyResult] = await db.promise().query(
      `SELECT history_id FROM internship_history WHERE internship_request_id = ?`,
      [request_id]
    );

    if (!historyResult.length) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• history ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö request_id ‡∏ô‡∏µ‡πâ" });
    }

    const history_id = historyResult[0]?.history_id;
    console.log("üîç history_id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:", history_id);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ scores ‡πÅ‡∏•‡∏∞ criteriaNames ‡∏Å‡πà‡∏≠‡∏ô Insert
    console.log("üìä scores ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", scores);
    console.log("üìã criteriaNames ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", criteriaDefaultNames);

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á adviser_evaluation_criteria ‡πÅ‡∏•‡∏∞ adviser_evaluation
    const promises = criteriaDefaultNames.map((criteriaName, index) => {
      const score = scores[index];
      const criteria_id = require('crypto').randomUUID(); // ‡πÉ‡∏ä‡πâ crypto ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UUID

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á adviser_evaluation_criteria
      const insertCriteriaQuery = `
        INSERT INTO adviser_evaluation_criteria (criteria_id, criteria_name, create_up)
        VALUES (?, ?, NOW())`;

      db.promise().query(insertCriteriaQuery, [criteria_id, criteriaName]);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á adviser_evaluation
      const insertEvaluationQuery = `
        INSERT INTO adviser_evaluation (history_id, score, no, evaluation_date, comment, criteria_id)
        VALUES (?, ?, ?, ?, ?, ?)`;

      return db.promise().query(insertEvaluationQuery, [
        history_id,
        score,
        index + 1,
        new Date(),
        additionalComments || '',
        criteria_id
      ]);
    });

    // ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    await Promise.all(promises);

    console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    res.status(201).json({ message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå Error saving evaluation:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", error: error.message });
  }
});

// üè´ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
router.get('/get-all-students', async (req, res) => {
  try {
    const [students] = await db.promise().query(
      `SELECT u.user_id, u.name, u.email, s.student_code, ir.request_id
       FROM internship_request ir
       INNER JOIN user u ON ir.student_id = u.user_id
       INNER JOIN student s ON u.student_id = s.student_id
       WHERE ir.status = 'A' AND ir.delete_up IS NULL`
    );

    if (students.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô" });
    }

    return res.status(200).json(students);
  } catch (error) {
    console.error("‚ùå Database Error:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" });
  }
});

module.exports = router;
